#include <iostream> 
#include <array><string> 
using namespace std;class Board {private:array<string, 9> board;public:explicit Board();void make_move(int cell, char mark);string get_mark(int cell);};Board::Board() {for (int i = 0; i < 9; i++){this->board[i] = to_string(i + 1);}}void Board::make_move(int cell, char mark){this->board[cell - 1] = mark;}string Board::get_mark(int cell){return this->board[cell - 1];}class ConsoleBoardCreator {private:Board *board;public :ConsoleBoardCreator(Board *inputted_board);string formatted_board();};ConsoleBoardCreator::ConsoleBoardCreator(Board *inputted_board){this->board = inputted_board;}string ConsoleBoardCreator::formatted_board(){return "  " + this->board->get_mark(1) + " | " + this->board->get_mark(2) + " | " + this->board->get_mark(3) + "\n" +" ----------- " + "\n  " +this->board->get_mark(4) + " | " + this->board->get_mark(5) + " | " + this->board->get_mark(6) + "\n" +" ----------- " + "\n  " +this->board->get_mark(7) + " | " + this->board->get_mark(8) + " | " + this->board->get_mark(9) + "\n";}class Rules {private:Board *board;public:Rules(Board *inputted_board);bool validate_input(int input);bool in_progress();string has_winner();};Rules::Rules(Board *inputted_board){board = inputted_board;}bool Rules::validate_input(int input){if (input < 1 || input > 9 || board->get_mark(input) == "O" || board->get_mark(input) == "X") {return false;}return true;}bool Rules::in_progress() {string winner_mark = has_winner();if (has_winner() == "_") {return true;}return false;}string Rules::has_winner() {if (board->get_mark(1) == board->get_mark(2) && board->get_mark(2) == board->get_mark(3)) {return board->get_mark(1);} else if (board->get_mark(4) == board->get_mark(5) && board->get_mark(5) == board->get_mark(6)) {return board->get_mark(4);} else if (board->get_mark(7) == board->get_mark(8) && board->get_mark(8) == board->get_mark(9)) {return board->get_mark(7);} else if (board->get_mark(1) == board->get_mark(4) && board->get_mark(4) == board->get_mark(7)) {return board->get_mark(1);} else if (board->get_mark(2) == board->get_mark(5) && board->get_mark(5) == board->get_mark(8)) {return board->get_mark(5);} else if (board->get_mark(3) == board->get_mark(6) && board->get_mark(6) == board->get_mark(9)) {return board->get_mark(3);} else if (board->get_mark(1) == board->get_mark(5) && board->get_mark(5) == board->get_mark(9)) {return board->get_mark(1);} else if (board->get_mark(3) == board->get_mark(5) && board->get_mark(5) == board->get_mark(7)) {return board->get_mark(3);} return "_";}class Game {private:Board *board;Rules *rules;ConsoleBoardCreator *creator;public:Game(Board *board_ptr, Rules *rules_ptr, ConsoleBoardCreator *creator_ptr);void start();};Game::Game(Board *board_ptr, Rules *rules_ptr, ConsoleBoardCreator *creator_ptr){this->board = board_ptr;this->rules = rules_ptr;this->creator = creator_ptr;}void Game::start() {string user_input = "";int turn_number = 0;int player_number;while (rules->in_progress()) {if (turn_number % 2 == 0) {player_number = 1;} else {player_number = 2;}cout << "\n" << creator->formatted_board();cout << "\nWhich cell would you like to pick, Player " << player_number << "?" << endl;cin >> user_input;while (!rules->validate_input(stoi(user_input))) {cout << creator->formatted_board();cout << "\nTry a diferent input please."<< endl;cout << "Which cell would you like to pick, Player " << player_number << "?" << endl;cin >> user_input;}if (turn_number % 2 == 0) {board->make_move(stoi(user_input), 'X');} else {board->make_move(stoi(user_input), 'O');}if (!rules->in_progress()) {cout << "\n" << creator->formatted_board() << endl;cout << "Good job Player " << player_number << "!\nYou have won this game!" << endl;}turn_number ++;if (turn_number >= 9) {cout << "Tie game." << endl;break;}}}int main(){Board board;Board *board_ptr = &board;ConsoleBoardCreator creator = ConsoleBoardCreator(board_ptr);ConsoleBoardCreator *creator_ptr = &creator;Rules rules = Rules(board_ptr);Rules *rules_ptr = &rules;Game game = Game(board_ptr, rules_ptr, creator_ptr);game.start();return 0;}